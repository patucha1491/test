/* ###########  CURSO DE GIT ############*/
###### Importantes
DavidLiza
Mecakike97
git commit -m "Nueva columna para veces de ingreso en WEBSERVICE, funcion de repeticion para login , nuevo servicio de AUTH0, TEST"

git init
git status 
git add .       o    git add Nombrearchivo.html o NombreFAOLDER/    git reset quitardelstage
git commit -m "Mensaje"
||
-- Se realiza Add de los archivos existentes y commit con mensaje
git commit -am "mensaje"
git log
git log --oneline --decorate --all -- graph 


git remote add origin (LINK_DE_REPOSITPRIO)
git push -u origin master
git push

git pull 

#Get repository LINK

git config --get remote.origin.url

# Pasos previos a realizar repositorio

Git bash es el  terminal nativo de git , que tambien puede ser la de el  
sistema operativo  

git help commit 
           ^ El comando del cual se desea obtneer infomracion 
		   

1.  git --version  

Agregar un usuario que realizara cambios en los repositorios que se encuentren 
en el dispositivo : 

2. git config --global user.name "Kike"
3. git config --global user.email "davidlizarazovesga@hotmail.com"
   git config --global user.email "dlizarazo@identica-sa.com"

Listar la informacion de usuario 
4. git config --global -l 
o  git config --list
######## Creacion y administracion del repositiorio 

# Comandos iniciales 
Recomendacion :  Crear una carpeta donde se encuentra el folder y abrir dentro de esta carpeta 
Crear o inicar el sistema de control de versiones .
Se puede ver lo que se genera mediante los archivos ocultos. 

1. git init 

2. git status 
-> Mostrara en rojo los archivos que no han sido agregados al repositorio 

3. git add . 
-> Agregara TODOS los archivos que no esten actualizados en el repositio 

4. git commit -m "Mensaje del commit que se desea realizar"

5. git  diff 
-> Realiza una comparacion de los archivos que fueron modificados  del momento actual al commit anterior. 

6. git  checkout . 
-> Regresa el proyecto al repositorio anterior. 

7. git log 
-> Muestra en orden de reciente a antiguo , los commits que se han realizado .


# State y logs 

// El stage es el punto previo al commit , son los archivos que se encuentran en espera para 
// ser agregados al commit, y estan demarcados de color verde cuando se realiza el " git status "

1.1. git  add nombredelarchivo.html
-> Realiza la actualizacion en el repositiorio de el archivo especificado 

1.2. git add nombredefolder/
-> Realiza la actualizacion en el repositorio de un folder especificado 

1.3. git add nnombrefolder/*.css
-> Agrega todos los archivos que terminen en esa extension al stage                                                                          omitir esto */

2.  git reset nombredefolder/ *.scss	
-> Remueve los archivos que se mencionan 

3. git add --all 
-> Agrega TODOS los cambios en el proyecto 

# Alias 

1. git config --global alias.l "log"
                             ^ el comando que va a reemplazar lo que se encuentra en comillas 

# Modificar un commit en la estructura del mismo 
# por si el mensaje esta mal o el nombre del mismo 

1. git commit --amend -m "Mensaje corregido"

2. git mv nombreorignial.html nuevonmobre.html
-> Realizar un cambio de nombre en el archivo real , y dejara en el stage 
la notificacion de que se renombro dicho archivo 

3. git rm archivo.html 
-> Se lleva registro de eliminacion y elimia un archiov que sea especificado 

# Rescatar los archivos eliminados o modificados en algun commit 
4. git reset --soft elnumerodelcommitalcualqueiremosregresar
                               ^ Este se obtiene al ver los logs de  los commits y puede ser copiado y pegado para su uso  
  Al ser soft , git realizza un paso atras en el historico , pero NO RECUPERA los archivos o el estado de los mismos 
  
5. git reset --hard elnumerodelcommitalcualqueiremosregresar

-> Este comando si recupera los archivos elimiandos o modificaciones realizadas 
en los archivos del proyecto 

6. git reflog 
-> Se obtiene un historico total de los cambios ,incluso si se hizo un reset --hard

7. git reset --mixed iddelcommitalquequeremosavanzar
->

git reflog
8. git reset --hard iddelpiuntoalquequeremosir 

# Ignorar archivos .gitignore

Para excluir archivos 
1.  Crear un archivo ".gitignore" a la altura del folder .git
2.  En gitignore sgregar los nombres o extensiones , o folder :

/config/		 #Carpeta
.class			 #Extensiones
/node_modules/   #Carpeta

https://github.com/github/gitignore -> Ejemplos de git ignore segun el lenguaje 


# Ramas y uniones 

1. git branch Nombre_de_la_nueva_rama
-> Crea una rama en ese punto 

2. git log --oneline --decorate --all -- graph 
-> Muestra el log de los commit del proyecto mostrando tambien las ramas 

3. git checkout nombre_de_rama_a_cambiar
-> Cambiar de rama

4. git merge nombre_de_la_rama 
-> Union de las ramas (debe realizarse desde la rama master)
// No es recomendable borrar las ramas asi se haga el merge
// esto es para llevar un control de las modificaciones realziadas 

5. git checkout -b nueva_rama
-> crea la rama y se mueve inmediatamente a esta rama 


# Merge con conflictos 

// LOs conflictos se presentan porque en la misma linea de codigo cambia lo que esta presenta .
// Al presentar el mensaje de conflicto en los archivos, debemos >
// Abrir el archivo con los conflicots y dejar la estructura final que queremos que tenga el mismo .
// guardar 
git add .
git commit -m "Conflictos resueltos"
git merge 

#Etiquetas

1. git tag version_de_prueba
2. git tag 
3. git log --oneline --decorate --all -- graph  // Esto pondra etiqueta en el actual del master 
// eliminar la etiqueta
4. git tag -d version_de_prueba


1. git tag -a v1.0.0 -m "version_incial"

2. git  show v1.0.0  // esto desplegara la infomracion 

git tag -a v1.2 9fceb02
                ´ Este es el numero del commit que se quiere Taggear
// ### Agregar etiquetas a commits anteriores ### //

git tag -a V0.0.1 IDENTIFIACDOR -M "Version de prueba"

// Es posible tener un mismo commit con varios TAGS , para eliminar , se hace el mismo paso  :
git tag -d Nombre_del_tag


    Open the command line.
    Set your username:
    git config --global user.name "FIRST_NAME LAST_NAME"
    Set your email address:
    git config --global user.email "MY_NAME@example.com"

//*   _____        
//*  /            -------   ---------   |     |   |       |   ----
//* |                |        	|		|	  |   |       |  |     \
//* |                |			|		|	  |   |       |  |     |
//* |     ___        | 			|		|=====|   |       |  |  ===
//* |        |       |			|		|	  |   |       |  |     \
//*  \       /		 |          |		|	  |   |		  |  |     |
//*    -----      -------       |		|	  |	   \_____/   |_____/



// Primeros pasos :
* Crear la cuenta .
* Crear el repositorio 

# Recomendaciones de primeros comandos en la ubicacion del proyecto :

git init 
git add README.md
git commit -m "first commit"
git remote add origin (LINK_DE_REPOSITPRIO)
// En el siguiente paso pregunta por el usuario y contraseña 
git push -u origin master

# Descarga un repositorio en una carpeta 
git clone (LINK_DEL_REPOSITORIO)

git clone https:// 

# Descargar los ultimos cambios que existen en el repositorio
// Actualiza los cambios directamente , en caso de que se realizara 
// una modificacion desde otra pc y este en git pero no en nuestro pc 
// o en caso de que se modificara desde git y se desee tener las 
// modificaciones
git pull 

#Traer un repositorio o informacion de un repositorio 
Desde github en la parte superior derecha 
Se crea un repositorio local , por lo que los cambios no se 
agregan al orginal. 



